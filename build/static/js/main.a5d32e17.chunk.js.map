{"version":3,"sources":["InfoBox.js","utils.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","attribution","url","map","country","circleId","countryInfo","_id","Circle","key","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a5d32e17.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\"\n\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\n  return (\n    <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\n      <CardContent>\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n        \n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n\tcases: {\n\t\thex: \"#CC1034\",\n\t\tmultiplier: 300,\n\t},\n\trecovered: {\n\t\thex: \"#7dd71d\",\n\t\tmultiplier: 300,\n\t},\n\tdeaths: {\n\t\thex: \"#fb4443\",\n\t\tmultiplier: 1500,\n\t},\n};\n\nexport const sortData = (data) => {\n\tconst sortedData = [...data];\n\n\tsortedData.sort((a, b) => {\n\t\tif (a.cases > b.cases) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t});\n\treturn sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n\tstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"caseType\") =>\n\tdata.map((country) => {\n\t\tlet circleId = country.countryInfo._id;\n\t\tif (circleId === null) {\n\t\t\tcircleId = country.country;\n\t\t}\n\n\t\treturn (\n\t\t\t<Circle\n\t\t\t\tkey={circleId}\n\t\t\t\tcenter={[country.countryInfo.lat, country.countryInfo.long]}\n\t\t\t\tfillOpacity={0.4}\n\t\t\t\tcolor={casesTypeColors[casesType].hex}\n\t\t\t\tfillColor={casesTypeColors[casesType].hex}\n\t\t\t\tradius={\n\t\t\t\t\tMath.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n\t\t\t\t}>\n\t\t\t\t<Popup>\n\t\t\t\t\t<div className='info-container'>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName='info-flag'\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tbackgroundImage: `url(${country.countryInfo.flag})`,\n\t\t\t\t\t\t\t}}></div>\n\t\t\t\t\t\t<div className='info-name'>{country.country}</div>\n\t\t\t\t\t\t<div className='info-confirmed'>\n\t\t\t\t\t\t\tCases: {numeral(country.cases).format(\"0,0\")}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='info-recovered'>\n\t\t\t\t\t\t\tRecovered: {numeral(country.recovered).format(\"0,0\")}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='info-deaths'>\n\t\t\t\t\t\t\tDeaths: {numeral(country.deaths).format(\"0,0\")}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</Popup>\n\t\t\t</Circle>\n\t\t);\n\t});\n","import React from \"react\";\nimport \"./Map.css\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from \"./utils\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n\treturn (\n\t\t<div className='map'>\n\t\t\t<LeafletMap center={center} zoom={zoom}>\n\t\t\t\t<TileLayer\n\t\t\t\t\tattribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n\t\t\t\t\turl='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n\t\t\t\t/>\n\t\t\t\t{showDataOnMap(countries, casesType)}\n\t\t\t</LeafletMap>\n\t\t</div>\n\t);\n}\n\nexport default Map;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport \"./Table.css\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <div key={country} className=\"tr\">\n          <div className=\"td\">{country}</div>\n          <div className=\"td\">\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n\tlegend: {\n\t\tdisplay: false,\n\t},\n\telements: {\n\t\tpoint: {\n\t\t\tradius: 0,\n\t\t},\n\t},\n\tmaintainAspectRatio: false,\n\ttooltips: {\n\t\tmode: \"index\",\n\t\tintersect: false,\n\t\tcallbacks: {\n\t\t\tlabel: function (tooltipItem, data) {\n\t\t\t\treturn numeral(tooltipItem.value).format(\"+0,0\");\n\t\t\t},\n\t\t},\n\t},\n\tscales: {\n\t\txAxes: [\n\t\t\t{\n\t\t\t\ttype: \"time\",\n\t\t\t\ttime: {\n\t\t\t\t\tformat: \"MM/DD/YY\",\n\t\t\t\t\ttooltipFormat: \"ll\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tyAxes: [\n\t\t\t{\n\t\t\t\tgridLines: {\n\t\t\t\t\tdisplay: false,\n\t\t\t\t},\n\t\t\t\tticks: {\n\t\t\t\t\tcallback: function (value, index, values) {\n\t\t\t\t\t\treturn numeral(value).format(\"0a\");\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n};\n\nconst buildChartData = (data, casesType = \"cases\") => {\n\tconst chartData = [];\n\tlet lastDataPoint;\n\tfor (let date in data.cases) {\n\t\tif (lastDataPoint) {\n\t\t\tconst newDataPoint = {\n\t\t\t\tx: date,\n\t\t\t\ty: data[casesType][date] - lastDataPoint,\n\t\t\t};\n\t\t\tchartData.push(newDataPoint);\n\t\t}\n\t\tlastDataPoint = data[casesType][date];\n\t}\n\treturn chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\", ...props }) {\n\tconst [data, setData] = useState({});\n\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\tfetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\")\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((data) => {\n\t\t\t\t\tconst chartData = buildChartData(data, casesType);\n\t\t\t\t\tsetData(chartData);\n\t\t\t\t});\n\t\t};\n\n\t\tfetchData();\n\t}, [casesType]);\n\n\treturn (\n\t\t<div className={props.className}>\n\t\t\t{data?.length > 0 && (\n\t\t\t\t<Line\n\t\t\t\t\toptions={options}\n\t\t\t\t\tdata={{\n\t\t\t\t\t\tdatasets: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbackgroundColor: \"rgba(204, 16, 52, 0.5)\",\n\t\t\t\t\t\t\t\tborderColor: \"#CC1034\",\n\t\t\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from \"react\";\nimport {\n\tMenuItem,\n\tFormControl,\n\tSelect,\n\tCard,\n\tCardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport \"./App.css\";\nimport { sortData, prettyPrintStat } from \"./utils\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n\tconst [countries, setCountries] = useState([]);\n\tconst [country, setCountry] = useState(\"worldwide\");\n\tconst [countryInfo, setCountryInfo] = useState({});\n\tconst [tableData, setTableData] = useState([]);\n\tconst [mapCenter, setMapCenter] = useState({\n\t\tlat: 20.5937,\n\t\tlng: 78.9629,\n\t});\n\tconst [mapZoom, setMapZoom] = useState(3);\n\tconst [mapCountries, setMapCountries] = useState([]);\n\tconst [casesType, setCasesType] = useState(\"cases\");\n\n\tuseEffect(() => {\n\t\tfetch(\"https://disease.sh/v3/covid-19/all\")\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCountryInfo(data);\n\t\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst getCountriesData = async () => {\n\t\t\tawait fetch(\"https://disease.sh/v3/covid-19/countries\")\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((data) => {\n\t\t\t\t\tconst countries = data.map((country) => ({\n\t\t\t\t\t\tname: country.country,\n\t\t\t\t\t\tvalue: country.countryInfo.iso2,\n\t\t\t\t\t}));\n\n\t\t\t\t\tconst sortedData = sortData(data);\n\t\t\t\t\tsetTableData(sortedData);\n\t\t\t\t\tsetMapCountries(data);\n\t\t\t\t\tsetCountries(countries);\n\t\t\t\t});\n\t\t};\n\n\t\tgetCountriesData();\n\t}, []);\n\n\tconst onCountryChange = async (event) => {\n\t\tconst countryCode = event.target.value;\n\n\t\tconst url =\n\t\t\tcountryCode === \"worldwide\"\n\t\t\t\t? \"https://disease.sh/v3/covid-19/all\"\n\t\t\t\t: `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n\t\tawait fetch(url)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCountry(countryCode);\n\t\t\t\tsetCountryInfo(data);\n\n\t\t\t\tsetMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\t\t\t\tsetMapZoom(4);\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t<div className='app__left'>\n\t\t\t\t<div className='app__header'>\n\t\t\t\t\t<h1>COVID-19 TRACKER</h1>\n\t\t\t\t\t<FormControl className='app__dropdown'>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\tonChange={onCountryChange}\n\t\t\t\t\t\t\tvalue={country}>\n\t\t\t\t\t\t\t<MenuItem value='worldwide'>Worldwide</MenuItem>\n\t\t\t\t\t\t\t{countries.map((country) => (\n\t\t\t\t\t\t\t\t<MenuItem key={country.value} value={country.value}>\n\t\t\t\t\t\t\t\t\t{country.name}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\n\t\t\t\t<div className='app__stats'>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType === \"cases\"}\n\t\t\t\t\t\tonClick={(e) => setCasesType(\"cases\")}\n\t\t\t\t\t\ttitle='Coronavirus Cases'\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayCases)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.cases)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tactive={casesType === \"recovered\"}\n\t\t\t\t\t\tonClick={(e) => setCasesType(\"recovered\")}\n\t\t\t\t\t\ttitle='Recovered'\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayRecovered)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.recovered)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType === \"deaths\"}\n\t\t\t\t\t\tonClick={(e) => setCasesType(\"deaths\")}\n\t\t\t\t\t\ttitle='Deaths'\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayDeaths)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.deaths)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<Map\n\t\t\t\t\tcountries={mapCountries}\n\t\t\t\t\tcasesType={casesType}\n\t\t\t\t\tcenter={mapCenter}\n\t\t\t\t\tzoom={mapZoom}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<Card className='app__right'>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3>Live Cases by Country</h3>\n\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t\t<h3 className='app__graphTitle'>Worldwide new {casesType}</h3>\n\t\t\t\t\t<LineGraph className='app__graph' casesType={casesType} />\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}